apiVersion: v2
name: checkmk
description: |
  Checkmk Helm chart for Kubernetes.  
  This chart deploys a Checkmk server using the official Checkmk Docker image.  
  It can deploy a livestatus service for each Checkmk site which can be forwarded by a LoadBalancer to remotely monitor hosts and services on this site. A TLS registration port can also be forwarded to allow agents to register with the Checkmk server.

  Checkmk the value table below to see configurable parameters of the chart and their default values. The [values.yaml](./values.yaml) can be used as a reference for how to configure your deployment.

  Example values file a deployment with a site and persistent storage. An ingress is deployed so this site can be accessed from outside the cluster:
  ```yaml

  ingress:
    enabled: true
    className: ""
    hosts:
      - host: "" # <- `""`` means any host

  sites:
    - name: "site_name"
      passwordSecret: "checkmk-password" # <- Use secret "checkmk-password" to store the password for this site
      persistentVolume:
        enabled: true
        size: 10Gi
        accessMode: ReadWriteOnce
        # storageClass: "local-path"

  ```

  Example values file for two sites on enterprise edition with persistent storage. An ingress is deployed so both sites can be accessed from outside the cluster.
  Exposing the Livestatus and TLS registration ports results in iptables forwards being created on the K3S nodes, this emulates a bare metal Checkmk deployment:
  ```yaml
  image:
    repository: registry.checkmk.com/enterprise/check-mk-enterprise

  imagePullSecrets:
    - name: regcred

  ingress:
    enabled: true
    className: ""
    hosts:
      - host: ""

  service:
    http:
      port: 80 # <- Cluster port for the Checkmk server
      type: ClusterIP # <- Since this has an Ingress we don't need a LoadBalancer
      protocol: TCP
      targetPort: 5000 # <- This is the port the Checkmk server listens on in the container
    livestatus:
      port: 6557
      type: LoadBalancer # <- Setting this to LoadBalancer automatically creates iptables forwards in K3S
      protocol: TCP
      targetPort: 6557
    tls:
      port: 8000
      type: LoadBalancer # <- Setting this to LoadBalancer automatically creates iptables forwards in K3S
      protocol: TCP
      targetPort: 8000

  sites:
    - name: "site_name"
      passwordSecret: "checkmk-password" # <- Use secret "checkmk-password" to store the password for this site
      persistentVolume:
        enabled: true
        size: 10Gi
        accessMode: ReadWriteOnce
        # storageClass: "local-path"
    - name: "second_site"
      passwordSecret: "checkmk-password" # <- Use secret "checkmk-password" to store the password for this site
      liveStatusPortOverride: 6558 # Overrides the external port for the livestatus service since 6557 is already in use
      tlsPortOverride: 8001 # Overrides the external port for the TLS registration service since 8000 is already in use
      persistentVolume:
        enabled: true
        size: 10Gi
        accessMode: ReadWriteOnce
        # storageClass: "local-path"

  ```
version: 1.0.0
appVersion: 2.1.0p28
